name: Validate Curated Release Notes
on:
  pull_request:
    branches:
      - main
jobs:
  validate-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Validate JSON schema
        run: |
          error_count=0
          error_list=()  # Array to collect all errors
          allowed_labels=("kind/bug-fix" "N/A" "kind/feature" "kind/upgrade-consideration" "kind/breaking-change" "kind/api-change" "kind/deprecation" "impact/high" "impact/medium")

          # Validate curated-release-notes.json files
          for file in addons/**/curated/**/curated-release-notes.json; do
            # Check JSON structure and collect errors but continue to validate other issues
            json_valid=true
            if ! jq empty "$file" 2>/dev/null; then
              error_message="Error: $file contains invalid JSON syntax. Please fix the JSON structure."
              error_list+=("$error_message")
              error_count=$((error_count + 1))
              json_valid=false
            fi
            
            # Skip further validations if JSON is invalid, but continue to next file
            if [ "$json_valid" = true ]; then
              # Check if the JSON file contains required fields
              if ! jq -e '.addonName and .version and .releaseDate and .notes' "$file" > /dev/null; then
                error_message="Error: $file is missing one or more required fields (addonName, version, releaseDate, notes)."
                error_list+=("$error_message")
                error_count=$((error_count + 1))
              fi

              # Validate releaseDate using a regular expression for format YYYY-MM-DD
              release_date=$(jq -r '.releaseDate' "$file")
              if [[ ! "$release_date" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                error_message="Error: Invalid date format in $file. Expected YYYY-MM-DD."
                error_list+=("$error_message")
                error_count=$((error_count + 1))
              else
                # Further validation using the date command to ensure it's a real date
                if ! date -d "$release_date" +"%Y-%m-%d" > /dev/null 2>&1; then
                  error_message="Error: Invalid date in $file. Expected a valid date in YYYY-MM-DD format."
                  error_list+=("$error_message")
                  error_count=$((error_count + 1))
                fi
              fi

              # Check if 'notes' contains both 'label' and 'text', and validate them
              notes_count=$(jq '.notes | length' "$file")
              for i in $(seq 0 $((notes_count-1))); do
                note_label=$(jq -r ".notes[$i].label[]" "$file")
                note_text=$(jq -r ".notes[$i].text" "$file")

                # Check if label or text is missing
                if [ -z "$note_label" ] || [ -z "$note_text" ]; then
                  error_message="Error: Note entry $i in $file has an empty 'label' or 'text' field."
                  error_list+=("$error_message")
                  error_count=$((error_count + 1))
                  continue
                fi

                # Check if each label is in the allowed list
                for label in $note_label; do
                  if [[ ! " ${allowed_labels[@]} " =~ " $label " ]]; then
                    error_message="Error: Invalid label '$label' in note entry $i of $file. Allowed labels are: ${allowed_labels[*]}."
                    error_list+=("$error_message")
                    error_count=$((error_count + 1))
                  fi
                done
              done
            fi
          done

          # Validate raw-release-notes.txt files regardless of JSON errors
          for raw_file in addons/**/raw/**/raw-release-notes.txt; do
            # Check if the file contains a source line
            source_line=$(grep -E "^source: https?://.*" "$raw_file" || true)
            if [ -z "$source_line" ]; then
              error_message="Error: $raw_file does not contain a valid 'source: <link>' line."
              error_list+=("$error_message")
              error_count=$((error_count + 1))
            else
              # Extract the link from the source line
              source_link=$(echo "$source_line" | awk '{print $2}' | tr -d '[:space:]')
              # Check if the link is reachable and print detailed error information using curl
              curl_output=$(curl -L -s -o /dev/null -w "%{http_code} %{url_effective} %{stderr}" "$source_link" 2>&1)
              http_status=$(echo "$curl_output" | awk '{print $1}')
              effective_url=$(echo "$curl_output" | awk '{print $2}')
              error_message=$(echo "$curl_output" | awk '{$1=$2=""; print $0}' | xargs)
              if [ "$http_status" -ne 200 ]; then
                error_message="Error: The link $source_link returned HTTP status $http_status. Effective URL: $effective_url. Error details: $error_message"
                error_list+=("$error_message")
                error_count=$((error_count + 1))
              fi
            fi
          done

          # Final error summary
          if [ $error_count -gt 0 ]; then
            echo "Validation complete. Found $error_count errors:"
            for err in "${error_list[@]}"; do
              echo "$err"
            done
            exit 1
          fi