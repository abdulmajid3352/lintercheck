name: Validate Curated Release Notes
on:
  pull_request:
    branches:
      - main
jobs:
  validate-schema:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Validate JSON schema
        run: |
          error_count=0
          allowed_labels=("kind/bug-fix" "N/A" "kind/feature" "kind/upgrade-consideration" "kind/breaking-change" "kind/api-change" "kind/deprecation" "impact/high" "impact/medium")
          for file in addons/**/curated/**/curated-release-notes.json; do
            echo "Validating $file"
            # Extract directory version from the file path
            dir_version=$(basename "$(dirname "$file")")
            # Check if the JSON file contains required fields
            if ! jq -e '.addonName and .version and .notes' "$file" > /dev/null; then
              echo "Error: $file is missing one or more required fields (addonName, version, notes)."
              error_count=$((error_count + 1))
              continue
            fi
            # Check if 'notes' contains both 'label' and 'text', and validate them
            notes_count=$(jq '.notes | length' "$file")
            for i in $(seq 0 $((notes_count-1))); do
              note_label=$(jq -r ".notes[$i].label[]" "$file")
              note_text=$(jq -r ".notes[$i].text" "$file")
              if [ -z "$note_label" ] || [ -z "$note_text" ]; then
                echo "Error: Note entry $i in $file has an empty 'label' or 'text' field."
                error_count=$((error_count + 1))
                continue
              fi
              # Check if label is in the allowed list
              for label in $note_label; do
                if [[ ! " ${allowed_labels[@]} " =~ " $label " ]]; then
                  echo "Error: Invalid label '$label' in note entry $i of $file. Allowed labels are: ${allowed_labels[*]}."
                  error_count=$((error_count + 1))
                fi
              done
            done
            echo "$file passed all validation checks."
          done
          for raw_file in addons/**/raw/**/raw-release-notes.txt; do
            echo "Validating $raw_file"
            # Check if the file contains a source line
            source_line=$(grep -E "^source: https?://.*" "$raw_file" || true)
            if [ -z "$source_line" ]; then
              echo "Error: $raw_file does not contain a valid 'source: <link>' line."
              error_count=$((error_count + 1))
            else
              # Extract the link from the source line
              source_link=$(echo "$source_line" | awk '{print $2}' | tr -d '[:space:]')
              # Check if the link is reachable and print detailed error information using curl
              curl_output=$(curl -L -s -o /dev/null -w "%{http_code} %{url_effective} %{stderr}" "$source_link" 2>&1)
              http_status=$(echo "$curl_output" | awk '{print $1}')
              effective_url=$(echo "$curl_output" | awk '{print $2}')
              error_message=$(echo "$curl_output" | awk '{$1=$2=""; print $0}' | xargs)
              if [ "$http_status" -ne 200 ]; then
                echo "Error: The link $source_link returned HTTP status $http_status. Effective URL: $effective_url. Error details: $error_message"
                error_count=$((error_count + 1))
              else
                echo "The link $source_link is valid and returned HTTP status $http_status."
              fi
            fi
            echo "$raw_file passed all validation checks."
          done
          if [ $error_count -gt 0 ]; then
            echo "Total errors: $error_count"
            exit 1
          else
            echo "All files passed validation checks."
          fi
